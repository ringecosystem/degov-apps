// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type NewTodo struct {
	Text     string    `json:"text"`
	UserID   string    `json:"userId"`
	Priority *Priority `json:"priority,omitempty"`
}

type Query struct {
}

type Subscription struct {
}

type Todo struct {
	ID        string   `json:"id"`
	Text      string   `json:"text"`
	Done      bool     `json:"done"`
	User      *User    `json:"user"`
	CreatedAt *string  `json:"createdAt,omitempty"`
	Priority  Priority `json:"priority"`
}

type UpdateTodo struct {
	ID       string    `json:"id"`
	Text     *string   `json:"text,omitempty"`
	Done     *bool     `json:"done,omitempty"`
	Priority *Priority `json:"priority,omitempty"`
}

type User struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Email *string `json:"email,omitempty"`
	Todos []*Todo `json:"todos"`
}

type Priority string

const (
	PriorityLow    Priority = "LOW"
	PriorityMedium Priority = "MEDIUM"
	PriorityHigh   Priority = "HIGH"
)

var AllPriority = []Priority{
	PriorityLow,
	PriorityMedium,
	PriorityHigh,
}

func (e Priority) IsValid() bool {
	switch e {
	case PriorityLow, PriorityMedium, PriorityHigh:
		return true
	}
	return false
}

func (e Priority) String() string {
	return string(e)
}

func (e *Priority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Priority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

func (e Priority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Priority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Priority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
