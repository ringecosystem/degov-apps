// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Dao struct {
	ID              string             `json:"id"`
	ChainID         int32              `json:"chainId"`
	ChainName       string             `json:"chainName"`
	Name            string             `json:"name"`
	Code            string             `json:"code"`
	ConfigLink      string             `json:"configLink"`
	TimeSync        *time.Time         `json:"timeSync,omitempty"`
	Ctime           time.Time          `json:"ctime"`
	LikedByUsers    []*UserLikedDao    `json:"likedByUsers"`
	FollowedByUsers []*UserFollowedDao `json:"followedByUsers"`
}

type GetNonceOutput struct {
	Nonce string `json:"nonce"`
}

type LoginInput struct {
	Message   string `json:"message"`
	Signature string `json:"signature"`
}

type LoginOutput struct {
	Token string `json:"token"`
}

type Mutation struct {
}

type NotificationRecord struct {
	ID         string             `json:"id"`
	ChainID    int32              `json:"chainId"`
	ChainName  string             `json:"chainName"`
	DaoName    string             `json:"daoName"`
	DaoCode    string             `json:"daoCode"`
	Type       NotificationType   `json:"type"`
	TargetID   *string            `json:"targetId,omitempty"`
	UserID     string             `json:"userId"`
	Status     NotificationStatus `json:"status"`
	Message    *string            `json:"message,omitempty"`
	RetryTimes int32              `json:"retryTimes"`
	Ctime      time.Time          `json:"ctime"`
	User       *User              `json:"user"`
}

type Query struct {
}

type User struct {
	ID                  string                `json:"id"`
	Address             string                `json:"address"`
	Email               *string               `json:"email,omitempty"`
	LikedDaos           []*UserLikedDao       `json:"likedDaos"`
	FollowedDaos        []*UserFollowedDao    `json:"followedDaos"`
	Channels            []*UserChannel        `json:"channels"`
	NotificationRecords []*NotificationRecord `json:"notificationRecords"`
}

type UserChannel struct {
	ID           string      `json:"id"`
	UserID       string      `json:"userId"`
	Verified     int32       `json:"verified"`
	ChannelType  ChannelType `json:"channelType"`
	ChannelValue string      `json:"channelValue"`
	Payload      *string     `json:"payload,omitempty"`
	Ctime        time.Time   `json:"ctime"`
	User         *User       `json:"user"`
}

type UserFollowedDao struct {
	ID                      string    `json:"id"`
	ChainID                 int32     `json:"chainId"`
	DaoCode                 string    `json:"daoCode"`
	UserID                  string    `json:"userId"`
	EnableNewProposal       int32     `json:"enableNewProposal"`
	EnableVotingEndReminder int32     `json:"enableVotingEndReminder"`
	Ctime                   time.Time `json:"ctime"`
	User                    *User     `json:"user"`
	Dao                     *Dao      `json:"dao"`
}

type UserLikedDao struct {
	ID      string    `json:"id"`
	DaoCode string    `json:"daoCode"`
	UserID  string    `json:"userId"`
	Ctime   time.Time `json:"ctime"`
	User    *User     `json:"user"`
	Dao     *Dao      `json:"dao"`
}

type ChannelType string

const (
	ChannelTypeEmail ChannelType = "EMAIL"
	ChannelTypeSms   ChannelType = "SMS"
	ChannelTypePush  ChannelType = "PUSH"
)

var AllChannelType = []ChannelType{
	ChannelTypeEmail,
	ChannelTypeSms,
	ChannelTypePush,
}

func (e ChannelType) IsValid() bool {
	switch e {
	case ChannelTypeEmail, ChannelTypeSms, ChannelTypePush:
		return true
	}
	return false
}

func (e ChannelType) String() string {
	return string(e)
}

func (e *ChannelType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChannelType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChannelType", str)
	}
	return nil
}

func (e ChannelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ChannelType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ChannelType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type NotificationStatus string

const (
	NotificationStatusSentOk   NotificationStatus = "SENT_OK"
	NotificationStatusSentFail NotificationStatus = "SENT_FAIL"
)

var AllNotificationStatus = []NotificationStatus{
	NotificationStatusSentOk,
	NotificationStatusSentFail,
}

func (e NotificationStatus) IsValid() bool {
	switch e {
	case NotificationStatusSentOk, NotificationStatusSentFail:
		return true
	}
	return false
}

func (e NotificationStatus) String() string {
	return string(e)
}

func (e *NotificationStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationStatus", str)
	}
	return nil
}

func (e NotificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type NotificationType string

const (
	NotificationTypeNewProposal     NotificationType = "NEW_PROPOSAL"
	NotificationTypeVote            NotificationType = "VOTE"
	NotificationTypeStatus          NotificationType = "STATUS"
	NotificationTypeVoteEndReminder NotificationType = "VOTE_END_REMINDER"
)

var AllNotificationType = []NotificationType{
	NotificationTypeNewProposal,
	NotificationTypeVote,
	NotificationTypeStatus,
	NotificationTypeVoteEndReminder,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeNewProposal, NotificationTypeVote, NotificationTypeStatus, NotificationTypeVoteEndReminder:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
