# GraphQL schema for DeGov Apps
#
# https://gqlgen.com/getting-started/

scalar Time

### ==== entities

type User {
  id: ID!
  address: String!
  email: String
  likedDaos: [UserLikedDao!]!
  followedDaos: [UserFollowedDao!]!
  channels: [UserChannel!]!
  notificationRecords: [NotificationRecord!]!
}

type Dao {
  id: ID!
  chainId: Int!
  chainName: String!
  name: String!
  code: String!
  seq: Int!
  state: String!
  configLink: String!
  timeSyncd: Time
  ctime: Time!
  utime: Time
  liked: Boolean
  subscribed: Boolean
}

type UserLikedDao {
  id: ID!
  daoCode: String!
  userId: String!
  ctime: Time!
  user: User!
  dao: Dao!
}

type UserFollowedDao {
  id: ID!
  chainId: Int!
  daoCode: String!
  userId: String!
  enableNewProposal: Int!
  enableVotingEndReminder: Int!
  ctime: Time!
  user: User!
  dao: Dao!
}

type NotificationRecord {
  id: ID!
  chainId: Int!
  chainName: String!
  daoName: String!
  daoCode: String!
  type: NotificationType!
  targetId: String
  userId: String!
  status: NotificationStatus!
  message: String
  retryTimes: Int!
  ctime: Time!
  user: User!
}

type UserChannel {
  id: ID!
  userId: String!
  verified: Int!
  channelType: ChannelType!
  channelValue: String!
  payload: String
  ctime: Time!
  user: User!
}

### === outputs

type GetNonceOutput {
  nonce: String!
}

type LoginOutput {
  token: String!
}

### === enums

enum NotificationType {
  NEW_PROPOSAL
  VOTE
  STATUS
  VOTE_END_REMINDER
}

enum NotificationStatus {
  SENT_OK
  SENT_FAIL
}

enum ChannelType {
  EMAIL
  SMS
  PUSH
}

### === inputs

input GetNonceInput {
  length: Int
}

input LoginInput {
  message: String!
  signature: String!
}

### ==== graphql

type Query {
  # Auth queries
  nonce(input: GetNonceInput!): String!

  # DAO queries
  daos: [Dao!]!

  # # User queries
  # users: [User!]!
  # user(id: ID!): User
  # userByAddress(address: String!): User

  # # DAO queries
  # daos: [Dao!]!
  # dao(id: ID!): Dao
  # daoByCode(code: String!): Dao

  # # User interactions
  # userLikedDaos(userId: String!): [UserLikedDao!]!
  # userFollowedDaos(userId: String!): [UserFollowedDao!]!

  # # Notifications
  # notificationRecords(userId: String!): [NotificationRecord!]!
  # userChannels(userId: String!): [UserChannel!]!
}

type Mutation {
  # Auth mutations
  login(input: LoginInput!): LoginOutput!

  # # User mutations
  # createUser(input: CreateUserInput!): User!
  # updateUser(input: UpdateUserInput!): User!
  # deleteUser(id: ID!): Boolean!

  # # DAO mutations
  # createDao(input: CreateDaoInput!): Dao!
  # updateDao(id: ID!, input: CreateDaoInput!): Dao!
  # deleteDao(id: ID!): Boolean!

  # # User interactions
  # likeDao(input: LikeDaoInput!): UserLikedDao!
  # unlikeDao(userId: String!, daoCode: String!): Boolean!
  # followDao(input: FollowDaoInput!): UserFollowedDao!
  # unfollowDao(userId: String!, daoCode: String!): Boolean!

  # # Notifications
  # createUserChannel(input: CreateUserChannelInput!): UserChannel!
  # updateUserChannel(id: ID!, input: CreateUserChannelInput!): UserChannel!
  # deleteUserChannel(id: ID!): Boolean!
  # verifyUserChannel(id: ID!): UserChannel!

  # createNotificationRecord(
  #   input: CreateNotificationRecordInput!
  # ): NotificationRecord!
}

# type Subscription {
#   # notificationCreated(userId: String!): NotificationRecord!
#   # daoUpdated(daoCode: String!): Dao!
# }
