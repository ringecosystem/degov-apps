package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/ringecosystem/degov-apps/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginOutput, error) {
	output, err := r.authService.Login(input)
	if err != nil {
		return nil, fmt.Errorf("login failed: %v", err)
	}

	return &output, nil
}

// Nonce is the resolver for the nonce field.
func (r *queryResolver) Nonce(ctx context.Context, input model.GetNonceInput) (string, error) {
	nonce, err := r.authService.Nonce(input)
	if err != nil {
		return "", err
	}
	if nonce == "" {
		return "", fmt.Errorf("failed to generate nonce")
	}
	return nonce, nil
}

// Daos is the resolver for the daos field.
func (r *queryResolver) Daos(ctx context.Context) ([]*model.Dao, error) {
	// @auth(required: false) allows this to work for both authenticated and unauthenticated users
	// Check if user is authenticated to provide personalized data
	authenticatedUser, _ := ctx.Value("authenticated_user").(string)

	if authenticatedUser != "" {
		// User is authenticated, return DAOs with personalized info (liked, subscribed, etc.)
		// For now, just call the regular method - you can extend this later
		return r.daoService.GetDaos()
	} else {
		// User not authenticated, return basic DAO info
		return r.daoService.GetDaos()
	}
}

// Dao is the resolver for the dao field.
func (r *queryResolver) Dao(ctx context.Context, id string) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: Dao - dao"))
}

// DaoByCode is the resolver for the daoByCode field.
func (r *queryResolver) DaoByCode(ctx context.Context, code string) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: DaoByCode - daoByCode"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Optional: Add additional authorization logic here
	// For example, only allow users to create their own user record
	if claims.Address != input.Address {
		return nil, fmt.Errorf("permission denied: can only create user for your own address")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return false, fmt.Errorf("authentication required: %v", err)
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}
func (r *mutationResolver) CreateDao(ctx context.Context, input model.CreateDaoInput) (*model.Dao, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: CreateDao - createDao"))
}
func (r *mutationResolver) UpdateDao(ctx context.Context, id string, input model.CreateDaoInput) (*model.Dao, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UpdateDao - updateDao"))
}
func (r *mutationResolver) DeleteDao(ctx context.Context, id string) (bool, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return false, fmt.Errorf("authentication required: %v", err)
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: DeleteDao - deleteDao"))
}
func (r *mutationResolver) LikeDao(ctx context.Context, input model.LikeDaoInput) (*model.UserLikedDao, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only like DAOs for their own account
	if claims.Address != input.UserID {
		return nil, fmt.Errorf("permission denied: can only like DAOs for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: LikeDao - likeDao"))
}
func (r *mutationResolver) UnlikeDao(ctx context.Context, userID string, daoCode string) (bool, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return false, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only unlike DAOs for their own account
	if claims.Address != userID {
		return false, fmt.Errorf("permission denied: can only unlike DAOs for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UnlikeDao - unlikeDao"))
}
func (r *mutationResolver) FollowDao(ctx context.Context, input model.FollowDaoInput) (*model.UserFollowedDao, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only follow DAOs for their own account
	if claims.Address != input.UserID {
		return nil, fmt.Errorf("permission denied: can only follow DAOs for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: FollowDao - followDao"))
}
func (r *mutationResolver) UnfollowDao(ctx context.Context, userID string, daoCode string) (bool, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return false, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only unfollow DAOs for their own account
	if claims.Address != userID {
		return false, fmt.Errorf("permission denied: can only unfollow DAOs for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UnfollowDao - unfollowDao"))
}
func (r *mutationResolver) CreateUserChannel(ctx context.Context, input model.CreateUserChannelInput) (*model.UserChannel, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only create channels for their own account
	if claims.Address != input.UserID {
		return nil, fmt.Errorf("permission denied: can only create channels for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: CreateUserChannel - createUserChannel"))
}
func (r *mutationResolver) UpdateUserChannel(ctx context.Context, id string, input model.CreateUserChannelInput) (*model.UserChannel, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only update channels for their own account
	if claims.Address != input.UserID {
		return nil, fmt.Errorf("permission denied: can only update channels for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UpdateUserChannel - updateUserChannel"))
}
func (r *mutationResolver) DeleteUserChannel(ctx context.Context, id string) (bool, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return false, fmt.Errorf("authentication required: %v", err)
	}

	// Additional authorization logic would be needed here to ensure
	// user can only delete their own channels

	// Implementation would go here
	panic(fmt.Errorf("not implemented: DeleteUserChannel - deleteUserChannel"))
}
func (r *mutationResolver) VerifyUserChannel(ctx context.Context, id string) (*model.UserChannel, error) {
	// Require authentication
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Additional authorization logic would be needed here to ensure
	// user can only verify their own channels

	// Implementation would go here
	panic(fmt.Errorf("not implemented: VerifyUserChannel - verifyUserChannel"))
}
func (r *mutationResolver) CreateNotificationRecord(ctx context.Context, input model.CreateNotificationRecordInput) (*model.NotificationRecord, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only create notifications for their own account
	if claims.Address != input.UserID {
		return nil, fmt.Errorf("permission denied: can only create notifications for your own account")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: CreateNotificationRecord - createNotificationRecord"))
}
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// Require authentication - this is admin only functionality
	_, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Additional admin check would go here
	// For now, treating as admin-only operation

	// Implementation would go here
	panic(fmt.Errorf("not implemented: Users - users"))
}
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	// Optional authentication - public profiles may be viewable
	// but private data requires authentication
	isAuthenticated := middleware.IsAuthenticated(ctx)

	if !isAuthenticated {
		// Return only public profile data
		// Implementation would go here for public data
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: User - user"))
}
func (r *queryResolver) UserByAddress(ctx context.Context, address string) (*model.User, error) {
	// Optional authentication - similar to User query
	isAuthenticated := middleware.IsAuthenticated(ctx)

	if !isAuthenticated {
		// Return only public profile data
		// Implementation would go here for public data
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UserByAddress - userByAddress"))
}
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	// Always require authentication for "me" query
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Return user data for the authenticated user
	userAddress := claims.Address

	// Implementation would go here to fetch user by address
	_ = userAddress
	panic(fmt.Errorf("not implemented: Me - me"))
}
func (r *queryResolver) UserLikedDaos(ctx context.Context, userID string) ([]*model.UserLikedDao, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only access their own liked DAOs
	if claims.Address != userID {
		return nil, fmt.Errorf("permission denied: can only access your own liked DAOs")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UserLikedDaos - userLikedDaos"))
}
func (r *queryResolver) UserFollowedDaos(ctx context.Context, userID string) ([]*model.UserFollowedDao, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only access their own followed DAOs
	if claims.Address != userID {
		return nil, fmt.Errorf("permission denied: can only access your own followed DAOs")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UserFollowedDaos - userFollowedDaos"))
}
func (r *queryResolver) NotificationRecords(ctx context.Context, userID string) ([]*model.NotificationRecord, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only access their own notifications
	if claims.Address != userID {
		return nil, fmt.Errorf("permission denied: can only access your own notifications")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: NotificationRecords - notificationRecords"))
}
func (r *queryResolver) UserChannels(ctx context.Context, userID string) ([]*model.UserChannel, error) {
	// Require authentication
	claims, err := middleware.RequireAuth(ctx)
	if err != nil {
		return nil, fmt.Errorf("authentication required: %v", err)
	}

	// Ensure user can only access their own channels
	if claims.Address != userID {
		return nil, fmt.Errorf("permission denied: can only access your own channels")
	}

	// Implementation would go here
	panic(fmt.Errorf("not implemented: UserChannels - userChannels"))
}
*/
