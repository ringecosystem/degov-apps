package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/ringecosystem/degov-apps/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginOutput, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Nonce is the resolver for the nonce field.
func (r *queryResolver) Nonce(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Nonce - nonce"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	user, err := r.userService.CreateUser(input.Address, input.Email)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:      user.ID,
		Address: user.Address,
		Email:   user.Email,
	}, nil
}
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	user, err := r.userService.UpdateUser(input.ID, input.Email)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:      user.ID,
		Address: user.Address,
		Email:   user.Email,
	}, nil
}
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}
func (r *mutationResolver) CreateDao(ctx context.Context, input model.CreateDaoInput) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: CreateDao - createDao"))
}
func (r *mutationResolver) UpdateDao(ctx context.Context, id string, input model.CreateDaoInput) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: UpdateDao - updateDao"))
}
func (r *mutationResolver) DeleteDao(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDao - deleteDao"))
}
func (r *mutationResolver) LikeDao(ctx context.Context, input model.LikeDaoInput) (*model.UserLikedDao, error) {
	panic(fmt.Errorf("not implemented: LikeDao - likeDao"))
}
func (r *mutationResolver) UnlikeDao(ctx context.Context, userID string, daoCode string) (bool, error) {
	panic(fmt.Errorf("not implemented: UnlikeDao - unlikeDao"))
}
func (r *mutationResolver) FollowDao(ctx context.Context, input model.FollowDaoInput) (*model.UserFollowedDao, error) {
	panic(fmt.Errorf("not implemented: FollowDao - followDao"))
}
func (r *mutationResolver) UnfollowDao(ctx context.Context, userID string, daoCode string) (bool, error) {
	panic(fmt.Errorf("not implemented: UnfollowDao - unfollowDao"))
}
func (r *mutationResolver) CreateUserChannel(ctx context.Context, input model.CreateUserChannelInput) (*model.UserChannel, error) {
	panic(fmt.Errorf("not implemented: CreateUserChannel - createUserChannel"))
}
func (r *mutationResolver) UpdateUserChannel(ctx context.Context, id string, input model.CreateUserChannelInput) (*model.UserChannel, error) {
	panic(fmt.Errorf("not implemented: UpdateUserChannel - updateUserChannel"))
}
func (r *mutationResolver) DeleteUserChannel(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUserChannel - deleteUserChannel"))
}
func (r *mutationResolver) VerifyUserChannel(ctx context.Context, id string) (*model.UserChannel, error) {
	panic(fmt.Errorf("not implemented: VerifyUserChannel - verifyUserChannel"))
}
func (r *mutationResolver) CreateNotificationRecord(ctx context.Context, input model.CreateNotificationRecordInput) (*model.NotificationRecord, error) {
	panic(fmt.Errorf("not implemented: CreateNotificationRecord - createNotificationRecord"))
}
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}
func (r *queryResolver) UserByAddress(ctx context.Context, address string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByAddress - userByAddress"))
}
func (r *queryResolver) Daos(ctx context.Context) ([]*model.Dao, error) {
	panic(fmt.Errorf("not implemented: Daos - daos"))
}
func (r *queryResolver) Dao(ctx context.Context, id string) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: Dao - dao"))
}
func (r *queryResolver) DaoByCode(ctx context.Context, code string) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: DaoByCode - daoByCode"))
}
func (r *queryResolver) UserLikedDaos(ctx context.Context, userID string) ([]*model.UserLikedDao, error) {
	panic(fmt.Errorf("not implemented: UserLikedDaos - userLikedDaos"))
}
func (r *queryResolver) UserFollowedDaos(ctx context.Context, userID string) ([]*model.UserFollowedDao, error) {
	panic(fmt.Errorf("not implemented: UserFollowedDaos - userFollowedDaos"))
}
func (r *queryResolver) NotificationRecords(ctx context.Context, userID string) ([]*model.NotificationRecord, error) {
	panic(fmt.Errorf("not implemented: NotificationRecords - notificationRecords"))
}
func (r *queryResolver) UserChannels(ctx context.Context, userID string) ([]*model.UserChannel, error) {
	panic(fmt.Errorf("not implemented: UserChannels - userChannels"))
}
func (r *subscriptionResolver) NotificationCreated(ctx context.Context, userID string) (<-chan *model.NotificationRecord, error) {
	panic(fmt.Errorf("not implemented: NotificationCreated - notificationCreated"))
}
func (r *subscriptionResolver) DaoUpdated(ctx context.Context, daoCode string) (<-chan *model.Dao, error) {
	panic(fmt.Errorf("not implemented: DaoUpdated - daoUpdated"))
}
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }
type subscriptionResolver struct{ *Resolver }
*/
