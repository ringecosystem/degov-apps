package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/ringecosystem/degov-apps/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginOutput, error) {
	output, err := r.authService.Login(input)
	if err != nil {
		return nil, fmt.Errorf("login failed: %v", err)
	}

	return &output, nil
}

// Nonce is the resolver for the nonce field.
func (r *queryResolver) Nonce(ctx context.Context, input model.GetNonceInput) (string, error) {
	nonce, err := r.authService.Nonce(input)
	if err != nil {
		return "", err
	}
	if nonce == "" {
		return "", fmt.Errorf("failed to generate nonce")
	}
	return nonce, nil
}

// Daos is the resolver for the daos field.
func (r *queryResolver) Daos(ctx context.Context) ([]*model.Dao, error) {
	// @auth(required: false) allows this to work for both authenticated and unauthenticated users
	// Check if user is authenticated to provide personalized data
	authenticatedUser, _ := ctx.Value("authenticated_user").(string)

	if authenticatedUser != "" {
		// User is authenticated, return DAOs with personalized info (liked, subscribed, etc.)
		// For now, just call the regular method - you can extend this later
		return r.daoService.GetDaos()
	} else {
		// User not authenticated, return basic DAO info
		return r.daoService.GetDaos()
	}
}

// Dao is the resolver for the dao field.
func (r *queryResolver) Dao(ctx context.Context, id string) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: Dao - dao"))
}

// DaoByCode is the resolver for the daoByCode field.
func (r *queryResolver) DaoByCode(ctx context.Context, code string) (*model.Dao, error) {
	panic(fmt.Errorf("not implemented: DaoByCode - daoByCode"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
