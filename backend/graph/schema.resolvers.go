package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"log/slog"

	gqlmodels "github.com/ringecosystem/degov-apps/graph/models"
	"github.com/ringecosystem/degov-apps/types"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input gqlmodels.LoginInput) (*gqlmodels.LoginOutput, error) {
	output, err := r.authService.Login(input)
	if err != nil {
		return nil, fmt.Errorf("login failed: %v", err)
	}

	return &output, nil
}

// ModifyLikeDao is the resolver for the modifyLikeDao field.
func (r *mutationResolver) ModifyLikeDao(ctx context.Context, input gqlmodels.ModifyLikeDaoInput) (bool, error) {
	user, _ := r.authUtils.GetUser(ctx)
	result, err := r.userInteractionService.ModifyLikeDao(types.BasicInput[gqlmodels.ModifyLikeDaoInput]{
		User:  user,
		Input: input,
	})
	return result, err
}

// Nonce is the resolver for the nonce field.
func (r *queryResolver) Nonce(ctx context.Context, input gqlmodels.GetNonceInput) (string, error) {
	nonce, err := r.authService.Nonce(input)
	if err != nil {
		return "", err
	}
	if nonce == "" {
		return "", fmt.Errorf("failed to generate nonce")
	}
	return nonce, nil
}

// Daos is the resolver for the daos field.
func (r *queryResolver) Daos(ctx context.Context) ([]*gqlmodels.Dao, error) {
	authenticatedUser, err := r.authUtils.GetUser(ctx)
	slog.Info("Fetching DAOs", "authenticated_user", authenticatedUser)

	fmt.Println("err:", err)
	if err != nil {
		// User not authenticated, return basic DAO info
		return r.daoService.GetDaos()
	}
	// User is authenticated, return DAOs with personalized info (liked, subscribed, etc.)
	// For now, just call the regular method - you can extend this later
	return r.daoService.GetDaos()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
